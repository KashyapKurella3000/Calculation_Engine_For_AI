#!/usr/bin/python3

import subprocess as sp
import argparse
import os
import time

res=0
uid=""
idnum=55

def check_if_has(lines,itms):
    """check_if_has checks to see if any item in itms is in the lines"""
    for x in itms:
        for l in lines:
            if x.upper() in l.upper():
                print("found",x,"in output")
                print(l)
                return True
    return False

trailers="\n\r\t "

def runecho(args,timeout=40.0):
    p1=sp.Popen(args,stderr=sp.STDOUT,stdout=sp.PIPE,encoding="utf-8")
    tstart=time.time()
    rv=[]
    cline=""
    while True:
        oc=p1.stdout.read(1)
        if not oc:
            time.sleep(0.10)
            if p1.poll()!=None:
                if len(cline)>0:
                   rv.append(cline)
                return rv
            if (time.time()-tstart)>timeout :
                p1.kill()
                if len(cline)>0:
                   rv.append(cline)
                print("Timeout")
                rv.append("Timeout")
                return rv
        else:
           print(oc,end="")
           if oc=="\n":
               rv.append(cline)
               cline=""
           else:
               cline+=oc
    if len(cline)>0:
       rv.append(cline)
    return rv


def runsynthesis(clkperiod,idnum):
    simres="No returned result\n"
    cwd=runecho(['pwd'])[0].strip()
    with open("sss","w") as fs:
      fs.write("#!/usr/bin/bash\n")
      fs.write("source /apps/design_environment.sh\n")
      fs.write("dc_shell -f synthesis.script | tee synres.txt\n")
    os.chmod("sss",0o755)
    try:
        os.remove("synthesis.script")
    except:
        pass
    with open("synthesis.script","w") as fs:
        fs.write("""set link_library {/home/morris/FreePDK45/osu_soc/lib/files/gscl45nm.db /apps/synopsys/PrimeTimeNew/pts/Q-2019.12/libraries/syn/dw_foundation.sldb}
set target_library {/home/morris/FreePDK45/osu_soc/lib/files/gscl45nm.db}
suppress_message {{ UID-401 VER-130 }}
read_sverilog fpa.sv
current_design fpa
create_clock clk -name clk -period 0.8
set_propagated_clock clk
set_clock_uncertainty 0.25 clk
set_propagated_clock clk
set_output_delay 0.4 -clock clk [all_outputs]
set all_inputs_wo_rst_clk [remove_from_collection [remove_from_collection [all_inputs] [get_port clk]] [get_port reset]]
set_driving_cell -lib_cell NAND2X1 $all_inputs_wo_rst_clk
set_input_delay 0.4 -clock clk $all_inputs_wo_rst_clk
set_output_delay 0.4 -clock clk [all_outputs]
set_fix_hold [ get_clocks clk ]
set_output_delay 0.3 -clock clk [all_outputs]
set_max_delay 1.0 -from [all_inputs] -to [all_outputs]
compile_ultra
create_clock clk -name clk -period 1.00

update_timing
report_timing -max_paths 5
write -hierarchy -format verilog -output fpa_gates.v
quit
""")
    try:
        os.remove("fpa_gates.v".format(idnum))
    except:
        pass
    try:
        uname=sp.check_output(["id","-un"]).decode()
        uname=uname.strip()
        arg=[f"./sss"]
        simres=runecho(arg,timeout=600)
    except:
        print("Synthesis didn't work")
        print(simres)
        res.write("synthesis didn't run\n")
        return False
    lines=simres
    if check_if_has(lines,["Latch","latch","Error","error","timing arc",
                           "violated","Violated"]):
        print("Synthesis has errors")
        res.write("Synthesis failed\n")
        return False
    res.write("Synthesis worked ish\n")
    return True

def runvcs(idnum):
    sp.call(["rm","-rf","simv","simv.daidir","csrc","*.vcd"])
    simres="No returned result\n"
    try:
        arg=["/home/morris/272/f24/hw2/sv_vcs","tfpa.svp"]
        simres=runecho(arg,timeout=100)
    except:
        print("Simulation didn't work")
        print(simres)
        res.write("VCS didn't run\n")
        return False
    lines=simres
    if check_if_has(lines,["Error ","Error:"]) :
        print("VCS simulation failed\n")
        res.write("VCS simulation failed\n")
        return False
    if not check_if_has(lines,["Great, the adder worked"]):
        print("VCS simulation didn't complete successfully")
        res.write("VCS didn't complete successfully\n")
        return False
    res.write("VCS simulation ran\n")
    print("\n\n\nVCS simulation worked\n\n")
    return True

def rungates(idnum):
    sp.call(["rm","-rf","simv","simv.daidir","csrc","*.vcd"])
    simres="No returned result\n"
    try:
        arg=["/home/morris/272/f24/hw2/sv_vcs","tfpa_gates.svp","/home/morris/FreePDK45/osu_soc/lib/files/gscl45nm.v"]
        simres=runecho(arg,timeout=100)
    except:
        print("Gate Simulation didn't work")
        print(simres)
        res.write("VCS gate didn't run\n")
        return False
    lines=simres
    if check_if_has(lines,["Error ","= ="]) :
        print("VCS gate simulation failed\n")
        res.write("VCS gate simulation failed\n")
        return False
    if not check_if_has(lines,["Great, the adder worked"]):
        print("VCS gate simulation didn't complete successfully")
        res.write("VCS gate didn't complete successfully\n")
        return False
    res.write("VCS gate simulation ran\n")
    print("\n\n\nVCS gate simulation worked\n\n")
    return True



def main():
    global res,uid,idnum
    clkperiod=1.0
    resfn="results.txt"
    parser=argparse.ArgumentParser(description='272 F24 HW1')
    parser.add_argument("--resultsFileName",default="results.txt")

    args = parser.parse_args()
    print(args)
    resfn=args.resultsFileName
    with open(resfn,"w") as res:
        uid=runecho(['id','-un'])
        res.write("HW run for user {} assignment HW2\n".format(uid))
        res.write("Run at {}\n".format(time.asctime(time.localtime(time.time()))))
        if not runvcs(idnum):
            return
        if not runsynthesis(clkperiod,idnum):
            return
        if not rungates(idnum):
            return
        res.write("HW worked\n")

main()

